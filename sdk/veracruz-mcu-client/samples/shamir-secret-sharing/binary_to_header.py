#!/usr/bin/env python3
#
# Generate header file containing a binary
#
# ##Â Authors
#
# The Veracruz Development Team.
#
# ## Licensing and copyright notice
#
# See the `LICENSE.md` file in the Veracruz root directory for
# information on licensing and copyright.
#

import argparse
import os.path
import sys

def main(args):
    print('Generating %s/%s from %s' % (args.header, args.source, args.binary))

    if args.name:
        name = args.name
    else:
        name = os.path.splitext(
            os.path.basename(args.binary))[0].upper()

    with open(args.binary, 'rb') as f:
        data = f.read()

    if args.header:
        with open(args.header, 'w') as f:
            _write = f.write
            def write(s='', **args):
                _write(s % args)
            def writeln(s='', **args):
                _write(s % args)
                _write('\n')
            f.write = write
            f.writeln = writeln

            f.writeln('//// AUTOGENERATED ////')
            f.writeln('#ifndef %(name)s_H', name=name)
            f.writeln('#define %(name)s_H', name=name)
            f.writeln()
            f.writeln('#include <stdint.h>')
            f.writeln()
            f.writeln('// general policy things')
            f.writeln('extern const uint8_t _%(name)s[%(len)d];', name=name, len=len(data))
            f.writeln('#define %(name)s _%(name)s', name=name)
            f.writeln()
            f.writeln('#endif')

    if args.source:
        with open(args.source, 'w') as f:
            _write = f.write
            def write(s='', **args):
                _write(s % args)
            def writeln(s='', **args):
                _write(s % args)
                _write('\n')
            f.write = write
            f.writeln = writeln

            f.writeln('//// AUTOGENERATED ////')
            f.writeln()
            f.writeln('#include <stdint.h>')
            f.writeln()
            f.writeln('const uint8_t _%(name)s[%(len)d] = {', name=name, len=len(data))
            for i in range(0, len(data), 8):
                f.writeln('    %(hex)s',
                    hex=' '.join('0x%02x,' % data[j]
                        for j in range(i, min(i+8, len(data)))))
            f.writeln('};')
            f.writeln()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Convert a binary into a header+source file')
    parser.add_argument('binary',
        help='File to read')
    parser.add_argument('--name',
        help='Use this name as the array name')
    parser.add_argument('--header',
        help='Output header file (.h)')
    parser.add_argument('--source',
        help='Output source file (.c)')
    args = parser.parse_args()
    main(args)
