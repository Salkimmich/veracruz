//! Protocol buffers for Veracruz transport protocol messages
//!
//! ##Â Authors
//!
//! The Veracruz Development Team.
//!
//! ## Licensing and copyright notice
//!
//! See the `LICENSE.md` file in the Veracruz root directory for
//! information on licensing and copyright.

syntax = "proto3";
package transport_protocol;

message StartMsg {
  string protocol = 1;
}


message Data {
  string file_name = 1;
  bytes data = 2;
}

message Read {
  string file_name = 1;
}

message NitroAttestationDoc {
  bytes doc = 1;
  int32 device_id = 2;
}

message PsaAttestationInit {
  bytes challenge = 1;
  int32 device_id = 2;
}

enum ResponseStatus {
  UNSET = 0;
  SUCCESS = 1;
  FAILED_INVALID_ROLE = 2;
  FAILED_NOT_READY = 3;
  FAILED_GENERIC = 4;
  FAILED_VM_ERROR = 5;
  FAILED_ERROR_CODE_RETURNED = 6;
  FAILED_INVALID_REQUEST = 7;
}

message Result {
  bytes data = 1;
}

message ErrorCode {
  bytes error = 1;
}

message PiHash {
  bytes data = 1;
}

message State {
  bytes state = 1;
}

message RequestPiHash {
  string file_name = 1;
}

message RequestResult {
  string file_name = 1;
}

message RequestProxyPsaAttestationToken {
  bytes challenge = 1;
}

message RequestCertificate {
}

message NativePsaAttestationToken {
  bytes token = 1;
  int32 device_id = 2;
  bytes csr = 3;
}

message ProxyPsaAttestationToken {
  bytes token = 1;
  bytes pubkey = 2;
  int32 device_id = 3;
}
message RequestShutdown {
}

message RequestNextRound {
}

message RequestState {
}

message RequestPolicyHash {
}

message PolicyHash {
  bytes data = 1;
}

message Cert {
  bytes data = 1;
}


message ProxyAttestationServerRequest {
  oneof message_oneof {
    StartMsg start_msg = 2;
    NativePsaAttestationToken native_psa_attestation_token = 3;
    ProxyPsaAttestationToken proxy_psa_attestation_token = 4;
    NitroAttestationDoc nitro_attestation_doc = 7;
  }
  uint32 context = 1;
}

message CertChain {
  bytes root_cert = 1;
  bytes enclave_cert = 2;
}

message ProxyAttestationServerResponse {
  oneof message_oneof {
    PsaAttestationInit psa_attestation_init = 2;
    CertChain cert_chain = 5;
  }
  uint32 context = 1;
}

message RuntimeManagerRequest {
  oneof message_oneof {
    Data write_file = 2;
    Data append_file = 3;
    RequestPiHash request_pi_hash = 4;
    RequestResult request_result = 5;
    RequestProxyPsaAttestationToken request_proxy_psa_attestation_token = 6;
    RequestShutdown request_shutdown = 8;
    PsaAttestationInit psa_attestation_init = 9;
    RequestPolicyHash request_policy_hash = 10;
    Read read_file = 11;
    RequestResult request_pipeline = 12;
  }
  uint32 context = 1;
}

message RuntimeManagerResponse {
  ResponseStatus status = 1;
  oneof message_oneof {
    Result result = 4;
    PiHash pi_hash = 5;
    ErrorCode error = 6;
    State state = 10;
    PolicyHash policy_hash = 11;
    Cert cert = 12;
  }
  uint32 context = 8;
}
