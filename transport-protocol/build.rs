//! Transport protocol build script
//!
//! ##Â Authors
//!
//! The Veracruz Development Team.
//!
//! ## Licensing and copyright notice
//!
//! See the `LICENSE_MIT.markdown` file in the Veracruz root directory for
//! information on licensing and copyright.

use std::fs;

extern crate protoc_rust;

// If possible, we would probably prefer to put the file generated by
// protoc_rust under OUT_DIR, but currently that seems to be difficult
// because of the internal attributes and documentation comment in the
// generated file. So instead, to avoid making other builds seem
// out-of-date, we generate the file in a temporary directory and move
// it into the source directory if the old file is missing or the new
// file has changed.
fn main() {
    println!("cargo:rerun-if-changed=protos/transport_protocol.proto");

    let filename = "transport_protocol.rs";
    let out_dir = "src/tmp";
    let new_file = format!("{}/{}", out_dir, filename);
    let old_file = format!("src/{}", filename);

    fs::create_dir_all(out_dir).expect("create_dir_all");

    protoc_rust::run(protoc_rust::Args {
        out_dir: out_dir,
        input: &["protos/transport_protocol.proto"],
        includes: &["protos"],
        customize: protoc_rust::Customize {
            ..Default::default()
        },
    })
    .expect("protoc");

    let old = fs::read_to_string(&old_file);
    let new = fs::read_to_string(&new_file).expect("protoc");
    if match old {
        Ok(x) => x != new,
        Err(_) => true,
    } {
        fs::rename(&new_file, &old_file).unwrap();
    } else {
        fs::remove_file(&new_file).unwrap();
    }
}
